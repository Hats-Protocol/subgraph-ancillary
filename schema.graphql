enum HatsSignerGateType {
  Single
  Multi
}

enum HatsAccountOperationType {
  Call
  DelegateCall
}

enum HatsSignerGateV2ThresholdType {
  ABSOLUTE
  PROPORTIONAL
}

type HatAuthority @entity {
  id: ID!
  "pre computed hats account address with a salt value of 1, null only if the hat was not created yet"
  primaryHatsAccount1ofNAddress: String
  hatsAccount1ofN: [HatsAccount1ofN!]! @derivedFrom(field: "accountOfHat")
  hsgOwner: [HatsSignerGate!]! @derivedFrom(field: "ownerHat")
  hsgSigner: [HatsSignerGate!]! @derivedFrom(field: "signerHats")
  hsgV2Owner: [HatsSignerGateV2!]! @derivedFrom(field: "ownerHat")
  hsgV2Signer: [HatsSignerGateV2!]! @derivedFrom(field: "signerHats")
  jokeraceAdmin: [JokeRaceEligibility!]! @derivedFrom(field: "adminHat")
  allowListOwner: [AllowListEligibility!]! @derivedFrom(field: "ownerHat")
  allowListArbitrator: [AllowListEligibility!]!
    @derivedFrom(field: "arbitratorHat")
  electionsBallotBox: [HatsElectionEligibility!]!
    @derivedFrom(field: "ballotBoxHat")
  electionsAdmin: [HatsElectionEligibility!]! @derivedFrom(field: "adminHat")
  eligibilityTogglePassthrough: [PassthroughModule!]!
    @derivedFrom(field: "passthroughHat")
  stakingJudge: [StakingEligibility!]! @derivedFrom(field: "judgeHat")
  stakingRecipient: [StakingEligibility!]! @derivedFrom(field: "recipientHat")
  stakingHatAdmins: [StakingEligibility!]! @derivedFrom(field: "hatAdmins")
  seasonHatAdmins: [SeasonToggle!]! @derivedFrom(field: "hatAdmins")
  characterSheetsLevelHatAdmins: [CharacterSheetsLevelEligibility!]!
    @derivedFrom(field: "hatAdmins")
  agreementOwner: [AgreementEligibility!]! @derivedFrom(field: "ownerHat")
  agreementArbitrator: [AgreementEligibility!]!
    @derivedFrom(field: "arbitratorHat")
  baalStakingJudge: [HatsStakingShaman!]! @derivedFrom(field: "judgeHat")
  hatsFarcasterDelegatorOwner: [HatsFarcasterDelegator!]!
    @derivedFrom(field: "owner")
  hatsFarcasterDelegatorCaster: [HatsFarcasterDelegator!]!
    @derivedFrom(field: "caster")
}

"Hats Signer Gate"
type HatsSignerGate @entity {
  id: ID!
  type: HatsSignerGateType!
  ownerHat: HatAuthority!
  signerHats: [HatAuthority!]!
  safe: String!
  minThreshold: BigInt!
  targetThreshold: BigInt!
  maxSigners: BigInt!
}

"HSG v2"
type HatsSignerGateV2 @entity {
  id: ID!
  ownerHat: HatAuthority!
  signerHats: [HatAuthority!]!
  safe: String!
  locked: Boolean!
  claimableFor: Boolean!
  implementation: String!
  enabledDelegatecallTargets: [String!]!
  thresholdType: HatsSignerGateV2ThresholdType!
  minThreshold: BigInt!
  targetThreshold: BigInt!
  guard: String!
  modules: [String!]!
  events: [HatsSignerGateV2Event!]! @derivedFrom(field: "hsg")
}

interface HatsSignerGateV2Event {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
}

type HatsSignerGateV2_OwnerHatSetEvent implements HatsSignerGateV2Event
  @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  ownerHat: String!
}

type HatsSignerGateV2_SignerHatsAddedEvent implements HatsSignerGateV2Event
  @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  newSignerHats: [String!]!
}

type HatsSignerGateV2_ThresholdConfigSetEvent implements HatsSignerGateV2Event
  @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  thresholdType: HatsSignerGateV2ThresholdType!
  minThreshold: BigInt!
  targetThreshold: BigInt!
}

type HatsSignerGateV2_HSGLockedEvent implements HatsSignerGateV2Event @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
}

type HatsSignerGateV2_ClaimableForSetEvent implements HatsSignerGateV2Event
  @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  claimableFor: Boolean!
}

type HatsSignerGateV2_DetachedEvent implements HatsSignerGateV2Event @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
}

type HatsSignerGateV2_MigratedEvent implements HatsSignerGateV2Event @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  newHsg: String!
}

type HatsSignerGateV2_DelegatecallTargetEnabledEvent implements HatsSignerGateV2Event
  @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  target: String!
  enabled: Boolean!
}

type HatsSignerGateV2_RegisteredEvent implements HatsSignerGateV2Event @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatId: String!
  signer: String!
}

type HatsSignerGateV2_ChangedGuardEvent implements HatsSignerGateV2Event
  @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  guard: String!
}

type HatsSignerGateV2_EnabledModuleEvent implements HatsSignerGateV2Event
  @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  module: String!
}

type HatsSignerGateV2_DisabledModuleEvent implements HatsSignerGateV2Event
  @entity {
  id: ID!
  hsg: HatsSignerGateV2!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  module: String!
}

"Hats Account 1ofN"
type HatsAccount1ofN @entity {
  id: ID!
  accountOfHat: HatAuthority!
  operations: [HatsAccount1ofNOperation!]! @derivedFrom(field: "hatsAccount")
}

type HatsAccount1ofNOperation @entity {
  id: ID!
  hatsAccount: HatsAccount1ofN!
  signer: String!
  to: String!
  value: BigInt!
  callData: Bytes!
  operationType: HatsAccountOperationType!
}

type HatsStakingShaman @entity {
  id: ID!
  hatId: String!
  judgeHat: HatAuthority!
  baal: String!
  stakingProxyImpl: String!
  sharesToken: String!
  minStake: BigInt!
  coolDownBuffer: BigInt!
  stakes: [ShamanStake!]! @derivedFrom(field: "stakingShaman")
}

"Shaman Stake"
type ShamanStake @entity {
  id: ID!
  stakingShaman: HatsStakingShaman!
  staker: String!
  amount: BigInt!
  unstakingAmount: BigInt!
  canUnstakeAfter: BigInt!
}

"Farcaster Delegator"
type HatsFarcasterDelegator @entity {
  id: ID!
  caster: HatAuthority!
  owner: HatAuthority!
}

" *** Modules *** "
interface HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
}

interface HatsModuleEvent {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
}

" Jokerace Eligibility "
type JokeRaceEligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  adminHat: [HatAuthority!]!
  currentTerm: JokeRaceEligibilityTerm
  nextTerm: JokeRaceEligibilityTerm
  allTerms: [JokeRaceEligibilityTerm!]!
    @derivedFrom(field: "jokeRaceEligibility")
  events: [JokeRaceEvent!]! @derivedFrom(field: "jokeRaceEligibilityInstance")
}

type JokeRaceEligibilityTerm @entity {
  id: ID!
  jokeRaceEligibility: JokeRaceEligibility!
  termStartedAt: BigInt
  termEndsAt: BigInt!
  topK: BigInt!
  transitionPeriod: BigInt!
  contest: String!
  winners: [String!]
}

interface JokeRaceEvent implements HatsModuleEvent {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  jokeRaceEligibilityInstance: JokeRaceEligibility!
}

type JokeRace_NextTermSetEvent implements JokeRaceEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  jokeRaceEligibilityInstance: JokeRaceEligibility!
  newContest: String!
  newTopK: BigInt!
  newTermEnd: BigInt!
  newTransitionPeriod: BigInt!
}

type JokeRace_TermStartedEvent implements JokeRaceEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  jokeRaceEligibilityInstance: JokeRaceEligibility!
  contest: String!
  topK: BigInt!
  termEnd: BigInt!
  transitionPeriod: BigInt!
}

" Allowlist Eligibility "
type AllowListEligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  ownerHat: HatAuthority!
  arbitratorHat: HatAuthority!
  eligibilityData: [AllowListEligibilityData!]!
    @derivedFrom(field: "allowListEligibility")
  events: [AllowlistEvent!]! @derivedFrom(field: "allowlistEligibilityInstance")
}

interface AllowlistEvent implements HatsModuleEvent {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  allowlistEligibilityInstance: AllowListEligibility!
}

type AllowListEligibilityData @entity {
  id: ID!
  allowListEligibility: AllowListEligibility!
  address: String!
  eligible: Boolean!
  badStanding: Boolean!
}

type Allowlist_AccountAddedEvent implements AllowlistEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  allowlistEligibilityInstance: AllowListEligibility!
  account: String!
}

type Allowlist_AccountsAddedEvent implements AllowlistEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  allowlistEligibilityInstance: AllowListEligibility!
  accounts: [String!]!
}

type Allowlist_AccountRemovedEvent implements AllowlistEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  allowlistEligibilityInstance: AllowListEligibility!
  account: String!
}

type Allowlist_AccountsRemovedEvent implements AllowlistEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  allowlistEligibilityInstance: AllowListEligibility!
  accounts: [String!]!
}

type Allowlist_AccountStandingChangedEvent implements AllowlistEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  allowlistEligibilityInstance: AllowListEligibility!
  account: String!
  standing: Boolean!
}

type Allowlist_AccountsStandingChangedEvent implements AllowlistEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  allowlistEligibilityInstance: AllowListEligibility!
  accounts: [String!]!
  standings: [Boolean!]!
}

type Allowlist_OwnerHatSetEvent implements AllowlistEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  allowlistEligibilityInstance: AllowListEligibility!
  newOwnerHat: String!
}

type Allowlist_ArbitratorHatSetEvent implements AllowlistEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  allowlistEligibilityInstance: AllowListEligibility!
  newArbitratorHat: String!
}

"HatsElection Eligibility"
type HatsElectionEligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  ballotBoxHat: HatAuthority!
  adminHat: [HatAuthority!]!
  terms: [ElectionTerm!]! @derivedFrom(field: "hatsElectionEligibility")
  currentTerm: ElectionTerm
  events: [ElectionEvent!]! @derivedFrom(field: "electionEligibilityInstance")
}
type ElectionTerm @entity {
  id: ID!
  hatsElectionEligibility: HatsElectionEligibility!
  "first term starts when 'elect' is called, next terms start when 'startNextTerm' is called"
  termStartedAt: BigInt
  termEnd: BigInt!
  "election is completed when 'elect' is called"
  electionCompletedAt: BigInt
  electedAccounts: [String!]
}

interface ElectionEvent implements HatsModuleEvent {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  electionEligibilityInstance: HatsElectionEligibility!
}

type Election_ElectionOpenedEvent implements ElectionEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  electionEligibilityInstance: HatsElectionEligibility!
  nextTermEnd: BigInt!
}

type Election_ElectionCompletedEvent implements ElectionEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  electionEligibilityInstance: HatsElectionEligibility!
  termEnd: BigInt!
  winners: [String!]!
}

type Election_NewTermStartedEvent implements ElectionEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  electionEligibilityInstance: HatsElectionEligibility!
  termEnd: BigInt!
}

type Election_RecalledEvent implements ElectionEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  electionEligibilityInstance: HatsElectionEligibility!
  termEnd: BigInt!
  accounts: [String!]!
}

" Passthrough Module "
type PassthroughModule implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  passthroughHat: HatAuthority!
}

" Staking Eligibility "
type StakingEligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  token: String!
  judgeHat: HatAuthority!
  recipientHat: HatAuthority!
  hatAdmins: [HatAuthority!]!
  minStake: BigInt!
  cooldownPeriod: BigInt!
  totalSlashedStakes: BigInt!
  stakes: [Stake!]! @derivedFrom(field: "stakingEligiblity")
  events: [StakingEvent!]! @derivedFrom(field: "stakingEligibilityInstance")
}

type Stake @entity {
  id: ID!
  stakingEligiblity: StakingEligibility!
  staker: String!
  amount: BigInt!
  slashed: Boolean!
  cooldownAmount: BigInt!
  cooldownEndsAt: BigInt!
}

interface StakingEvent implements HatsModuleEvent {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  stakingEligibilityInstance: StakingEligibility!
}

type Staking_StakedEvent implements StakingEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  stakingEligibilityInstance: StakingEligibility!
  staker: String!
  amount: BigInt!
}

type Staking_UnstakeBegunEvent implements StakingEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  stakingEligibilityInstance: StakingEligibility!
  staker: String!
  amount: BigInt!
  cooldownEnd: BigInt!
}

type Staking_SlashedEvent implements StakingEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  stakingEligibilityInstance: StakingEligibility!
  wearer: String!
  amount: BigInt!
}

type Staking_MinStakeChangedEvent implements StakingEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  stakingEligibilityInstance: StakingEligibility!
  newMinStake: BigInt!
}

type Staking_JudgeHatChangedEvent implements StakingEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  stakingEligibilityInstance: StakingEligibility!
  newJudgeHat: String!
}

type Staking_RecipientHatChangedEvent implements StakingEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  stakingEligibilityInstance: StakingEligibility!
  newRecipientHat: String!
}

type Staking_CooldownPeriodChangedEvent implements StakingEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  stakingEligibilityInstance: StakingEligibility!
  newDelay: BigInt!
}

type Staking_ForgivenEvent implements StakingEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  stakingEligibilityInstance: StakingEligibility!
  staker: String!
}

" Season Toggle "
type SeasonToggle implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  hatAdmins: [HatAuthority!]!
}

" Charecter Sheets Level Eligibility "
type CharacterSheetsLevelEligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  hatAdmins: [HatAuthority!]!
}

" Agreement Eligibility "
type AgreementEligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  ownerHat: HatAuthority!
  arbitratorHat: HatAuthority!
  currentAgreement: Agreement!
  currentAgreementNumber: BigInt!
  agreements: [Agreement!]! @derivedFrom(field: "agreementEligibility")
  badStandings: [String!]!
  events: [AgreementEvent!]! @derivedFrom(field: "agreementEligibilityInstance")
}

type Agreement @entity {
  id: ID!
  agreementEligibility: AgreementEligibility!
  agreement: String!
  signers: [String!]!
  graceEndTime: BigInt!
}

interface AgreementEvent implements HatsModuleEvent {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  agreementEligibilityInstance: AgreementEligibility!
}

type Agreement_HatClaimedWithAgreementEvent implements AgreementEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  agreementEligibilityInstance: AgreementEligibility!
  claimer: String!
  hatId: String!
  agreement: String!
}

type Agreement_AgreementSignedEvent implements AgreementEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  agreementEligibilityInstance: AgreementEligibility!
  signer: String!
  agreement: String!
}

type Agreement_AgreementSetEvent implements AgreementEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  agreementEligibilityInstance: AgreementEligibility!
  agreement: String!
  grace: BigInt!
}

type Agreement_OwnerHatSetEvent implements AgreementEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  agreementEligibilityInstance: AgreementEligibility!
  newOwnerHat: String!
}

type Agreement_ArbitratorHatSetEvent implements AgreementEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  agreementEligibilityInstance: AgreementEligibility!
  newArbitratorHat: String!
}

type Agreement_RevokedSingleEvent implements AgreementEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  agreementEligibilityInstance: AgreementEligibility!
  wearer: String!
}

type Agreement_RevokedMultipleEvent implements AgreementEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  agreementEligibilityInstance: AgreementEligibility!
  wearers: [String!]!
}

type Agreement_ForgivenSingleEvent implements AgreementEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  agreementEligibilityInstance: AgreementEligibility!
  wearer: String!
}

type Agreement_ForgivenMultipleEvent implements AgreementEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  agreementEligibilityInstance: AgreementEligibility!
  wearers: [String!]!
}

" Erc20 Eligibility "
type Erc20Eligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  token: String!
  minBalance: BigInt!
}

" Erc721 Eligibility "
type Erc721Eligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  token: String!
  minBalance: BigInt!
}

" Erc1155 Eligibility "
type Erc1155Eligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  contractAddress: String!
  tokens: [BigInt!]!
  minBalances: [BigInt!]!
}

" Hat Wearing Eligibility "
type HatWearingEligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  criterionHat: String!
}

" Gitcoin Passport Eligibility "
type GitcoinPassportEligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  decoder: String!
  scoreCriterion: BigInt!
}

" CoLinks Eligibility "
type CoLinksEligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  threshold: BigInt!
}

" Hat Controlled Module "
type HatControlledModule implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  controllerHatId: String!
  wearersStatusData: [HatControlledModuleWearerStatus!]!
    @derivedFrom(field: "hatControlledModule")
  hatsStatusData: [HatControlledModuleHatStatus!]!
    @derivedFrom(field: "hatControlledModule")
  events: [HatControlledModuleEvent!]!
    @derivedFrom(field: "hatControlledModuleInstance")
}

type HatControlledModuleWearerStatus @entity {
  id: ID!
  hatControlledModule: HatControlledModule!
  hatId: String!
  wearer: String!
  eligible: Boolean!
  standing: Boolean!
}

type HatControlledModuleHatStatus @entity {
  id: ID!
  hatControlledModule: HatControlledModule!
  hatId: String!
  active: Boolean!
}

interface HatControlledModuleEvent implements HatsModuleEvent {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatControlledModuleInstance: HatControlledModule!
}

type HatControlled_WearerStatusSet implements HatControlledModuleEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatControlledModuleInstance: HatControlledModule!
  wearer: String!
  hatId: String!
  eligible: Boolean!
  standing: Boolean!
}

type HatControlled_HatStatusSet implements HatControlledModuleEvent @entity {
  id: ID!
  module: HatsModule!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatControlledModuleInstance: HatControlledModule!
  hatId: String!
  active: Boolean!
}

" Public Lock V14 Eligibility "
type PublicLockV14Eligibility implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  lock: String!
  referrer: String!
  referrerFeePercentage: BigInt!
}

" Chains "
type HatsEligibilitiesChain implements HatsModule @entity {
  id: ID!
  version: String
  hatId: String!
  rulesets: [EligibilitiesRuleset!]! @derivedFrom(field: "eligibilitiesChain")
  moduleAddresses: [String!]!
  numRulesets: BigInt!
}

type EligibilitiesRuleset @entity {
  id: ID!
  eligibilitiesChain: HatsEligibilitiesChain!
  modules: [HatsModule!]!
}
