enum HatsSignerGateType {
  Single
  Multi
}

type HatAuthority @entity {
  id: ID!
  hatsAccount1ofN: [HatsAccount1ofN!]! @derivedFrom(field: "accountOfHat")
  hsgOwner: [HatsSignerGate!]! @derivedFrom(field: "ownerHat")
  hsgSigner: [HatsSignerGate!]! @derivedFrom(field: "signerHats")
  jokeraceAdmin: [JokeRaceEligibility!]! @derivedFrom(field: "adminHat")
  allowListOwner: [AllowListEligibility!]! @derivedFrom(field: "ownerHat")
  allowListArbitrator: [AllowListEligibility!]!
    @derivedFrom(field: "arbitratorHat")
  electionsBallotBox: [HatsElectionEligibility!]!
    @derivedFrom(field: "ballotBoxHat")
  electionsAdmin: [HatsElectionEligibility!]! @derivedFrom(field: "adminHat")
  eligibilityTogglePassthrough: [PassthroughModule!]!
    @derivedFrom(field: "passthroughHat")
  stakingJudge: [StakingEligibility!]! @derivedFrom(field: "judgeHat")
  stakingRecipient: [StakingEligibility!]! @derivedFrom(field: "recipientHat")
  stakingHatAdmins: [StakingEligibility!]! @derivedFrom(field: "hatAdmins")
  seasonHatAdmins: [SeasonToggle!]! @derivedFrom(field: "hatAdmins")
  characterSheetsLevelHatAdmins: [CharacterSheetsLevelEligibility!]!
    @derivedFrom(field: "hatAdmins")
}

type HatsSignerGate @entity {
  id: ID!
  type: HatsSignerGateType!
  ownerHat: HatAuthority!
  signerHats: [HatAuthority!]!
  safe: String!
  minThreshold: BigInt!
  targetThreshold: BigInt!
  maxSigners: BigInt!
}

type JokeRaceEligibility @entity {
  id: ID!
  hatId: String!
  adminHat: [HatAuthority!]!
  currentContest: String!
  currentTermEnd: BigInt!
  currentTopK: BigInt!
}

type AllowListEligibility @entity {
  id: ID!
  hatId: String!
  ownerHat: HatAuthority!
  arbitratorHat: HatAuthority!
}

type HatsElectionEligibility @entity {
  id: ID!
  hatId: String!
  ballotBoxHat: HatAuthority!
  adminHat: [HatAuthority!]!
  terms: [ElectionTerm!]! @derivedFrom(field: "hatsElectionEligibility")
  currentTerm: ElectionTerm
}
type ElectionTerm @entity {
  id: ID!
  hatsElectionEligibility: HatsElectionEligibility!
  "first term starts when 'elect' is called, next terms start when 'startNextTerm' is called"
  termStartedAt: BigInt
  termEnd: BigInt!
  "election is completed when 'elect' is called"
  electionCompletedAt: BigInt
  electedAccounts: [String!]
}

type PassthroughModule @entity {
  id: ID!
  hatId: String!
  passthroughHat: HatAuthority!
}

type StakingEligibility @entity {
  id: ID!
  hatId: String!
  judgeHat: HatAuthority!
  recipientHat: HatAuthority!
  hatAdmins: [HatAuthority!]!
}

type SeasonToggle @entity {
  id: ID!
  hatId: String!
  hatAdmins: [HatAuthority!]!
}

type CharacterSheetsLevelEligibility @entity {
  id: ID!
  hatId: String!
  hatAdmins: [HatAuthority!]!
}

type HatsAccount1ofN @entity {
  id: ID!
  accountOfHat: HatAuthority!
  transactions: [HatsAccount1ofNTransaction!]!
    @derivedFrom(field: "hatsAccount")
}

type HatsAccount1ofNTransaction @entity {
  id: ID!
  hatsAccount: HatsAccount1ofN!
  signer: String!
  to: String!
  value: BigInt!
  callData: Bytes!
}
